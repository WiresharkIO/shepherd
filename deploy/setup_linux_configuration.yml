---
- name: Bring Kernel to defined Version and remove Clutter
  hosts: all
  become: true

  vars:
    # shepherd firmware expects a certain branch!
    default_kernel_branch: lts-4_19
    timezone: Europe/Berlin
    # potentially dangerous / improve security:
    non_essential_packages_a: ['dnsmasq', 'dnsmasq-*', 'nginx', 'nginx-*']
    # old kernel data # TODO: kernel / header that comes with image are somehow not in apt -> dpkgs
    non_essential_packages_b: ['linux-image-4.14.*', 'linux-image-5.4.*', 'linux-image-5.10.*', 'linux-image-5.15.*']
    non_essential_packages_c: ['linux-headers-4.14.*', 'linux-headers-5.4.*', 'linux-headers-5.10.*', 'linux-headers-5.15.*']
    # todo: soon add linux-*-4.19.*
    # not needed drivers / packages
    non_essential_packages_d: ['alsa-utils', 'wireless-*', 'wpasupplicant', 'ofono', 'bluez', 'bluetooth', 'rfkill']
    non_essential_packages_e: ['seeed-modules-*', 'rtl8*', 'can-utils', 'libasound*']
    non_essential_packages_f: ['ti-sgx-*', 'eject', 'iw', 'libx11*', 'initramfs*']
    non_essential_packages_g: ['vim-runtime', 'humanity-icon-theme', 'python3-sympy']
    # - add: libjpeg*,

  vars_prompt:
    # these can be also passed as argument:  -e "update_kernel=True" -> automatically skips these prompts
    - name: update_kernel
      prompt: "Do you want to update the Kernel?"
      private: false
      default: "no"

    - name: update_bootloader
      prompt: "Do you want to update the Bootloader?"
      private: false
      default: "no"

    - name: delete_unused_files
      prompt: "Should the script remove unused packets & files like firmware?"
      private: false
      default: "no"

  tasks:

    - name: GIT - Clone & Update boot-script-tools from RobertCNelson
      ansible.builtin.git:
        repo: https://github.com/RobertCNelson/boot-scripts
        dest: /opt/scripts
        update: true
        version: master

    - name: SCRIPT - Switch to newest release of Kernel Branch "{{ default_kernel_branch }}"
      ansible.builtin.command: '/opt/scripts/tools/update_kernel.sh --{{ default_kernel_branch }}'
      when: update_kernel | bool
      changed_when: true

    - name: Restart device
      ansible.builtin.reboot:
      when: update_kernel | bool

    - name: SCRIPT - Update Bootloader
      ansible.builtin.shell:
        cmd: 'yes | /opt/scripts/tools/developers/update_bootloader.sh'
      when: update_bootloader | bool

    - name: APT - Upgrade all packages to the latest version
      ansible.builtin.apt:
        upgrade: dist
        update_cache: true

    - name: Find unused firmware
      ansible.builtin.find:
        paths: '/usr/lib/firmware'
        patterns: '{{ item }}'
        hidden: true
        recurse: true
      with_items:
        - "netronome"
        - "qcom"
        - "amd*"
        - "intel"
        - "mellanox"
        - "liquidio"
        - "mrvl"
        - "ath1*"
        - "nvidia"
        - "radeon"
        - "iwlwifi-*"
      register: files_fw_list # this will give us a nested list
    - name: Delete unused firmware
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ files_fw_list.results|subelements('files') }}"
      loop_control:
        label: "{{ item.path }}"
      when: false # delete_unused_files | bool # TODO: disable for now

    - name: Optimize Boot by removing outdated initrd - find files with Wildcard
      # ansible.builtin.command: "rm -rf /boot/initrd.img*"
      ansible.builtin.find:
        paths: '/boot'
        patterns: 'initrd.img*'
      register: files_init
    - name: Optimize Boot by removing outdated initrd - delete files found previously
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ files_init.files }}"
      when: delete_unused_files | bool

    - name: Find Logs and other tmp-files
      ansible.builtin.find:
        paths: "/var/log/"
        patterns: '*'
        recurse: true
      register: files_tmp
    - name: Delete Logs and other tmp-files
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ files_tmp.files }}"
      when: delete_unused_files | bool

    - name: APT - Uninstall non-essential Packages
      ansible.builtin.apt:
        name: "{{ item }}"
        state: absent
        purge: true
      failed_when: false
      with_items:
        - "{{ non_essential_packages_a }}"
        - "{{ non_essential_packages_b }}"
        - "{{ non_essential_packages_c }}"
        - "{{ non_essential_packages_d }}"
        - "{{ non_essential_packages_e }}"
        - "{{ non_essential_packages_f }}"
        - "{{ non_essential_packages_g }}"
      when: delete_unused_files | bool

    - name: Uname - Get Kernel-Version
      ansible.builtin.command: 'uname --kernel-release'
      register: kernelrelease
      changed_when: false

    - name: APT - Install matching Kernel-Headers for running Kernel
      ansible.builtin.apt:
        name: 'linux-headers-{{ kernelrelease.stdout.strip() }}'
        update_cache: true

    - name: APT - Cleanup Dependencies
      ansible.builtin.apt:
        autoremove: true

    - name: APT - Autoclean
      ansible.builtin.apt:
        autoclean: true

    - name: APT - Clean Caches
      ansible.builtin.apt:
        clean: true

    - name: CFG - Set timezone to "{{ timezone }}"
      timezone:
        name: "{{ timezone }}"

    - name: Restart device
      ansible.builtin.reboot:

  #  - name: CFG - Set CPU Governor to more relaxed state (powersave)
